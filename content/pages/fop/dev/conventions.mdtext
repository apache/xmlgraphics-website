Title: Apache(tm) FOP Development: Coding Conventions

#Apache&trade; FOP Development: Coding Conventions


Acknowledgement: Some content in this guide was adapted from other Apache&trade; projects such as Avalon, Cactus, Turbine and Velocity.

## Subversion Repository { #svn}

Conventions in this section apply to Repository content, regardless of type:


- Files checked in must conform to the code conventions for that type of file (java files must conform to java requirements, xml to xml requirements, etc.). If a submitted patch does not conform, it is the responsibility of the committer to bring it into conformance before checking it in. Developers submitting patches are encouraged to follow the code conventions to reduce the work load on the committers.

- To reduce the amount of spurious deltas, all text (non-binary) files checked into SVN must have Unix-style line endings (LF only). Many IDEs and editors (even on non-Unix platforms) have settings that can facilitate this convention.

- In order to be able to discern commits from a committer from those where a committer applied a patch from a contributor, the commit message must contain a separate line following this pattern: **"Submitted by: [contributor's name] <[contributor's obfuscated e-mail address]>"**. This also helps doing audits on the repository.

## Java { #java}

### Java Style { #java-style}

In order to facilitate the human reading of FOP source code, reduce churning in code, and prevent disputes, the FOP developers have agreed on a set of coding conventions. The basis of these coding conventions is documented in the [Apache XML Project Guidelines](http://xml.apache.org/source.html), which requires that **all Java Language source code in the repository must be written in conformance to Sun's**  [Code Conventions for the Java Programming Language](http://java.sun.com/docs/codeconv/html/CodeConvTOC.doc.html). In addition, the FOP developers have agreed to other conventions, which are summarized in the following table:

| Convention | Rationale | Enforced By |
|------------|-----------|-------------|
| Every Java source file starts with the Apache licence header. | Required by Apache. | checkstyle |
| No tabs in content. | Programmers should not have to adjust the tab settings in their editor to be able to read the source code. | checkstyle |
| Indentation of 4 spaces per level. | Maximize readability. | Not enforced |
| Comments, identifiers, and project documentation must be in English. In general, other languages must not be used, except in translated documentation and language-specific i10n files. | To avoid the need for everyone to learn all languages, English has become the standard language for many technology projects, and is the only human language that all FOP developers are expected to know. | Not enforced |
| American English spelling should be used. Alternative spelling and idioms are tolerated, but may be changed by anyone to American. | Some standard is useful, and American English is widely used and accepted for technology standards and projects. | Not enforced. |
| Fully qualify all import statements (no "import java.util.*") | Clarity | checkstyle |
| No underscores in variable names except for static finals. | Upper/lower case distinctions can be made in all other variable names, eliminating the need for artificial word boundaries. | checkstyle |
| Opening brace for a block should be on the same line as its control statement (if, while, etc.). | Standardization, general preference. | checkstyle |
| Write appropriate javadoc entries for all public and protected classes, methods, and variables. | Basic API documentation is needed. | checkstyle |
| By [ASF policy](http://mail-archives.apache.org/mod_mbox/jakarta-jmeter-dev/200402.mbox/%3C4039F65E.7020406@atg.com%3E), @author tags are officially discouraged. However it is permissible to indicate the original author(s) of an entire file or package in a comment provided it follows the copyright and license header. | Attribution of subsequent contributions are recorded by the SVN commit history logs, so should not be included. | checkstyle |

For developers that dislike these conventions, one workaround is to develop using their own style, then use a formatting tool like [astyle](http://astyle.sourceforge.net/) (Artistic Style) before committing.

### Checkstyle { #java-checkstyle}

The java syntax checker " [Checkstyle](http://checkstyle.sourceforge.net) " is used to enforce many of the FOP coding standards. The standards enforced through Checkstyle are documented in its configuration file (xml-fop/checkstyle.cfg). The conventions defined in the configuration file are an integral part of FOP's coding conventions, and should not be changed without common consent. In other words, the configuration file contains additional conventions that are not documented on this page, but are generally accepted as good style within the java community (i.e. they are the default behavior of checkstyle, which the FOP developers have decided to adopt *de facto*). Any apparent contradiction between the configuration file and this document should be raised on the fop-dev mailing list so that it can be clarified.

To use the "checkstyle" target in FOP's build process, call "mvn checkstyle:check". If there are checkstyle errors, the build will fail and the error messages will be logged to the console.

Checkstyle is probably most useful when integrated into your IDE. See the Checkstyle web site for more information about IDE plugins.

### Java Best Practices { #java-best-practices}

The following general principles are a distillation of best practice expectations on the FOP project.


- Apply common sense when coding. When coding keep in mind that others will read your code and have to understand it.

- Readability comes before performance, at least initially.

- If you can refactor some code to make it more understandable, please do so.

- Properly document code, especially where it's important.

- Use interfaces instead of implementations where possible. This favors a clearer design and makes switching between implementations easier (Examples: List instead of ArrayList/Vector, Map instead of HashMap/Hashtable).

- Avoid using exceptions for flow control.

- Try to catch exceptions as much as possible and rethrow higher level exceptions (meaning hiding the low level detailed and putting a message that is more related to the function of your code).

- It is important not to lose the stack trace which contains important information. Use chained exception for that. Avalon Framework provides [CascadingException](http://jakarta.apache.org/avalon/api/org/apache/avalon/framework/CascadingException.htm) (and similar) for this. Exception class names and stack traces must be treated like gold. Do whatever is required so that this information is not lost. Printing error messages to System.err or System.out is useless in a server-side environment where this info is usually lost.

- Always log the exception at the higher level (i.e. where it is handled and not rethrown).

- Try to avoid catching Throwable or Exception and catch specific exceptions instead.

### Resources { #java-resources}


- [book on code style] Code Complete by Steve McConnell.

- [code formatting software] [JRefactory](http://jrefactory.sourceforge.net).

### Related Links { #java-links}


-  [Apache XML Graphics Code Repositories](http://xmlgraphics.apache.org/repo.html)

-  [Jakarta Code Conventions and Standards](http://jakarta.apache.org/site/faqs.html#Coding%20Conventions%20and%20Standards) (see Coding Conventions and Standards section)

## XML { #xml}

| Convention | Rationale | Enforced By |
|------------|-----------|-------------|
| XML files must always be well-formed. Validation is optional. | Document integrity | Not enforced |
| No tabs in content. | Users should not have to adjust tab settings in their editor to be able to read the content. | Not enforced |
| Indentation of 2 spaces per level | Maximize readability | Not enforced |
