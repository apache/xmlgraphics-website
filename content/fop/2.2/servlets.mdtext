Title: Apache(tm) FOP: Servlets

#Apache&trade; FOP: Servlets
<subtitle>How to use Apache&trade; FOP in a Servlet</subtitle>

## Overview { #overview}

This page discusses topic all around using Apache&trade; FOP in a servlet environment.

## Example Servlets in the FOP distribution { #example-servlets}

In the directory {fop-dir}/fop-core/src/main/java/org/apache/fop/servlet, you'll find a working example of a FOP-enabled servlet.

The servlet is automatically built when you build Apache FOP using the supplied Ant script. After building the servlet, drop fop.war into the webapps directory of Apache Tomcat (or any other web container). Then, you can use URLs like the following to generate PDF files:


- http://localhost:8080/fop/fop?fo=/home/path/to/fofile.fo

- http://localhost:8080/fop/fop?xml=/home/path/to/xmlfile.xml&xsl=/home/path/to/xslfile.xsl



The source code for the servlet can be found under {fop-dir}/fop-core/src/main/java/org/apache/fop/servlet/FopServlet.java.

<note>This example servlet should not be used on a public web server connected to the Internet as it does not contain any measures to prevent Denial-of-Service-Attacks. It is provided as an example and as a starting point for your own servlet.</note>

## Create your own Servlet { #servlet}

<note>This section assumes you are familiar with [embedding FOP](embedding.html).</note>

### A minimal Servlet { #minimal-servlet}

Here is a minimal code snippet to demonstrate the basics:

    :::java
    private TransformerFactory tFactory = TransformerFactory.newInstance();

    public void doGet(HttpServletRequest request,
                       HttpServletResponse response) throws ServletException {
        try {
            response.setContentType("application/pdf");
            FopFactory fopFactory = FopFactory.newInstance(new File(".").toURI());
            Fop fop = fopFactory.newFop(MimeConstants.MIME_PDF, response.getOutputStream());
            Transformer transformer = tFactory.newTransformer();
            Source src = new StreamSource("foo.fo");
            Result res = new SAXResult(fop.getDefaultHandler());
            transformer.transform(src, res);
        } catch (Exception ex) {
            throw new ServletException(ex);
        }
    }

<note>There are numerous problems with the code snippet above. Its purpose is only to demonstrate the basic concepts. See below for details.</note>

### Adding XSL tranformation (XSLT) { #xslt}

A common requirement is to transform an XML source to XSL-FO using an XSL transformation. It is recommended to use JAXP for this task. The following snippet shows the basic code:

    :::java
    private TransformerFactory tFactory = TransformerFactory.newInstance();

    public void init() throws ServletException {
        //Optionally customize the FopFactory and TransformerFactory here
    }

    [..]

    FopFactory fopFactory = FopFactory.newInstance(new File(".").toURI());

    //Setup a buffer to obtain the content length
    ByteArrayOutputStream out = new ByteArrayOutputStream();

    //Setup FOP
    Fop fop = fopFactory.newFop(MimeConstants.MIME_PDF, out);

    //Setup Transformer
    Source xsltSrc = new StreamSource(new File("foo-xml2fo.xsl"));
    Transformer transformer = tFactory.newTransformer(xsltSrc);

    //Make sure the XSL transformation's result is piped through to FOP
    Result res = new SAXResult(fop.getDefaultHandler());

    //Setup input
    Source src = new StreamSource(new File("foo.xml"));

    //Start the transformation and rendering process
    transformer.transform(src, res);

    //Prepare response
    response.setContentType("application/pdf");
    response.setContentLength(out.size());

    //Send content to Browser
    response.getOutputStream().write(out.toByteArray());
    response.getOutputStream().flush();

<note>Buffering the generated PDF in a ByteArrayOutputStream is done to avoid potential problems with the Acrobat Reader Plug-in in Microsoft Internet Explorer.</note>

The `Source` instance used above is simply an example. If you have to read the XML from a string, supply a `new StreamSource(new
          StringReader(xmlstring))`. Constructing and reparsing an XML string is generally less desirable than using a SAXSource if you generate your XML. You can alternatively supply a DOMSource as well. You may also use dynamically generated XSL if you like.

Because you have an explicit `Transformer` object, you can also use it to explicitely set parameters for the transformation run.

### Custom configuration { #cfg}

You can easily set up your own FOUserAgent as demonstrated on the [Embedding page](embedding.html).

### Improving performance { #performance}

There are several options to consider:


- Instead of java.io.ByteArrayOutputStream consider using the ByteArrayOutputStream implementation from the [Jakarta Commons IO project](http://commons.apache.org/io/) which allocates less memory. The full class name is: `org.apache.commons.io.output.ByteArrayOutputStream`

- In certain cases it can help to write the generated PDF to a temporary file so you can quickly reuse the file. This is especially useful, if Internet Explorer calls the servlet multiple times with the same request or if you often generate equal PDFs.

Of course, the [performance hints from the Embedding page](embedding.html#performance) apply here, too.

### Accessing resources in your web application { #uriresolver}

Often, you will want to use resources (stylesheets, images etc.) which are bundled with your web application. FOP provides a URIResolver implementation that lets you access files via the Servlet's ServletContext. The class is called `org.apache.fop.servlet.ServletContextURIResolver`.

Here's how to set it up in your servlet. Instantiate a new instance in the servlet's init() method:

    :::java
    /** URIResolver for use by this servlet */
    protected URIResolver uriResolver;

    public void init() throws ServletException {
        this.uriResolver = new ServletContextURIResolver(getServletContext());
        [..]
    }

The ServletContextURIResolver reacts on URIs beginning with "servlet-context:". If you want to access an image in a subdirectory of your web application, you could, for example, use: "servlet-context:/images/myimage.png". Don't forget the leading slash after the colon!

Further down, you can use the URIResolver for various things:


- With the Transformer (JAXP/XSLT) so things like document() functions can resolver "servlet-context:" URIs.

- With the FopFactory so every resource FOP loads can be loaded using a "servlet-context:" URI.

- You can the ServletContextURIResolver yourself in your servlet code to access stylesheets or XML files bundled with your web application.

Here are some example snippets:

    :::java
    //Setting up the JAXP TransformerFactory
    this.transFactory = TransformerFactory.newInstance();
    this.transFactory.setURIResolver(this.uriResolver);

    [..]
    
     ResourceResolver resolver = new ResourceResolver() {
            public OutputStream getOutputStream(URI uri) throws IOException {
                URL url = getServletContext().getResource(uri.toASCIIString());
                return url.openConnection().getOutputStream();
            }

            public Resource getResource(URI uri) throws IOException {
                return new Resource(getServletContext().getResourceAsStream(uri.toASCIIString()));
            }
        };
    
    //Setting up the FOP factory
    FopFactoryBuilder builder = new FopFactoryBuilder(new File(".").toURI(), resolver);
    fopFactory = builder.build();

    [..]

    //The stylesheet for the JAXP Transfomer
    Source xsltSrc = this.uriResolver.resolve(
        "servlet-context:/xslt/mystylesheet.xsl", null);
    Transformer transformer = this.transFactory.newTransformer(xsltSrc);
    transformer.setURIResolver(this.uriResolver);

## Notes on Microsoft Internet Explorer { #ie}

Some versions of Internet Explorer will not automatically show the PDF or call the servlet multiple times. These are well-known limitations of Internet Explorer and are not a problem of the servlet. However, Internet Explorer can still be used to download the PDF so that it can be viewed later. Here are some suggestions in this context:


- Use an URL ending in `.pdf`, like `http://myserver/servlet/stuff.pdf`. Yes, the servlet can be configured to handle this. If the URL has to contain parameters, try to have **both** the base URL as well as the last parameter end in `.pdf`, if necessary append a dummy parameter, like `http://myserver/servlet/stuff.pdf?par1=a&par2=b&d=.pdf`. The effect may depend on IEx version.

- Give IEx the opportunity to cache. In particular, ensure the server does not set any headers causing IEx not to cache the content. This may be a real problem if the document is sent over HTTPS, because most IEx installations will by default *not* cache any content retrieved over HTTPS. Setting the `Expires` header entry may help in this case:

        :::java
        response.setDateHeader("Expires", System.currentTimeMillis() + cacheExpiringDuration * 1000);

    Consult your server manual and the relevant RFCs for further details on HTTP headers and caching.

- Cache in the server. It may help to include a parameter in the URL which has a timestamp as the value min order to decide whether a request is repeated. IEx is reported to retrieve a document up to three times, but never more often.

## Servlet Engines { #servlet-engine}

When using a servlet engine, there are potential CLASSPATH issues, and potential conflicts with existing XML/XSLT libraries. Servlet containers also often use their own classloaders for loading webapps, which can cause bugs and security problems.

### Tomcat { #tomcat}

Check Tomcat's documentation for detailed instructions about installing FOP and Cocoon. There are known bugs that must be addressed, particularly for Tomcat 4.0.3.

### WebSphere 3.5 { #websphere}

Put a copy of a working parser in some directory where WebSphere can access it. For example, if /usr/webapps/yourapp/servlets is the CLASSPATH for your servlets, copy the Xerces jar into it (any other directory would also be fine). Do not add the jar to the servlet CLASSPATH, but add it to the CLASSPATH of the application server which contains your web application. In the WebSphere administration console, click on the "environment" button in the "general" tab. In the "variable name" box, enter "CLASSPATH". In the "value" box, enter the correct path to the parser jar file (/usr/webapps/yourapp/servlets/Xerces.jar in our example here). Press "OK", then apply the change and restart the application server.

## Handling complex use cases { #complex-usecases}

Sometimes the requirements for a servlet get quite sophisticated: SQL data sources, multiple XSL transformations, merging of several datasources etc. In such a case consider using [Apache Cocoon](http://cocoon.apache.org/) instead of a custom servlet to accomplish your goal.
