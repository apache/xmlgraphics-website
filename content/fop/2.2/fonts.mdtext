Title: Apache(tm) FOP: Fonts

#Apache&trade; FOP: Fonts
<authors><person email="" name="Jeremias MÃ¤rki"></person><person email="" name="Tore Engvig"></person><person email="" name="Adrian Cumiskey"></person><person email="" name="Max Berger"></person></authors>

## Summary { #intro}

The following table summarizes the font capabilities of the various Apache&trade; FOP renderers:

| Renderer | Base-14 | AWT/OS | Custom | Custom Embedding |
|----------|---------|--------|--------|------------------|
| PDF | yes | no | yes | yes |
| PostScript | yes | no | yes | yes |
| PCL | yes (modified) | yes (painted as bitmaps) | yes (painted as bitmaps) | no |
| AFP | no | no | yes | yes |
| Java2D/AWT/Bitmap | if available from OS | yes | yes | n/a (display only) |
| Print | if available from OS | yes | yes | controlled by OS printer driver |
| RTF | n/a (font metrics not needed) | n/a | n/a | n/a |
| TXT | yes (used for layout but not for output) | no | yes (used for layout but not for output) | no |
| XML | yes | no | yes | n/a |

Note that Java2D based renderers (Java2D, AWT, Print, TIFF, PNG) support both system (AWT/OS) and custom fonts.

## Base-14 Fonts { #Base-14-Fonts}

The Adobe PostScript and PDF Specification specify a set of 14 fonts that must be available to every PostScript interpreter and PDF reader: Helvetica (normal, bold, italic, bold italic), Times (normal, bold, italic, bold italic), Courier (normal, bold, italic, bold italic), Symbol and ZapfDingbats.

The following font family names are hard-coded into FOP for the Base-14 font set:

| Base-14 font | font families |
|--------------|---------------|
| Helvetica | Helvetica, sans-serif, SansSerif |
| Times | Times, Times Roman, Times-Roman, serif, any |
| Courier | Courier, monospace, Monospaced |
| Symbol | Symbol |
| ZapfDingbats | ZapfDingbats |

Please note that recent versions of Adobe Acrobat Reader replace "Helvetica" with "Arial" and "Times" with "Times New Roman" internally. GhostScript replaces "Helvetica" with "Nimbus Sans L" and "Times" with "Nimbus Roman No9 L". Other document viewers may do similar font substitutions. If you need to make sure that there are no such substitutions, you need to specify an explicit font and embed it in the target document.

## Missing Fonts { #missing-fonts}

When FOP does not have a specific font at its disposal (because it's not installed in the operating system or set up in FOP's configuration), the font is replaced with "any". "any" is internally mapped to the Base-14 font "Times" (see above).

## Missing Glyphs { #missing-glyphs}

Every font contains a particular set of [glyphs](http://en.wikipedia.org/wiki/Glyph). If no glyph can be found for a given character, FOP will issue a warning and use the glpyh for "#" (if available) instead. Before it does that, it consults a (currently hard-coded) registry of glyph substitution groups (see Glyphs.java in Apache XML Graphics Commons). This registry can supply alternative glyphs in some cases (like using space when a no-break space is requested). But there's no guarantee that the result will be as expected (for example, in the case of hyphens and similar glyphs). A better way is to use a font that has all the necessary glyphs. This glyph substitution is only a last resort.

## System Fonts { #awt}

Support for system fonts relies on the Java AWT subsystem for font metric information. Through operating system registration, the AWT subsystem knows what fonts are available on the system, and the font metrics for each one.

When working with renderers that supports system fonts (see above table) and you're missing a font, you can just install it in your operating system and it should be available for these renderers. Please note that this is not true for output formats, such as PDF or PostScript, that only support custom fonts.

## Custom Fonts { #custom}

| Renderer   | TTF | TTC | Type1 | OTF | AFP Fonts |
|------------|-----|-----|-------|-----|-----------|
| PDF        | yes | yes | yes | yes | no |
| Postscript | yes | yes | yes | yes | no |
| AFP | yes | no | no | no | yes |
| PCL | yes | yes | bitmap | bitmap | no |
| TIFF | bitmap | bitmap | bitmap | bitmap | no |

Support for custom fonts is highly output format dependent (see above table). This section shows how to add Type 1, TrueType (TTF) and OpenType (OTF) fonts to the PDF, PostScript and Java2D-based renderers. Other renderers (like AFP) support other font formats. Details in this case can be found on the page about [output formats](output.html).

In earlier FOP versions, it was always necessary to create an XML font metrics file if you wanted to add a custom font. This inconvenient step has been removed and in addition to that, FOP supports auto-registration of fonts, i.e. FOP can find fonts installed in your operating system or can scan user-specified directories for fonts. Font registration via XML font metrics has been deprecated and is not recommended although it is still supported by the current code.

More information about fonts can be found at [Adobe Font Technical Notes](http://www.adobe.com/devnet/font.html).

### OpenType Advanced Font Features

OpenType fonts support advanced layout features such as ligatures, small caps, swashes, alternates, old style figures and more. Please see [Advanced Typographic Extensions - OpenType Layout](http://www.microsoft.com/typography/otspec/TTOCHAP1.htm). These features are currently missing within FOP due to the implementation opting to favor a greater number of formats. 

While FOP may support embedding OpenType with advanced features in the future, the current method extracts the Compact Font Format (CFF) data containing among other things the character definitions, optionally subsets and embeds the result as a Type1C font. This allows the font to be used by both Postscript and older PDF versions while losing the features mentioned above. This is because embedding Open-Type in it's original state is only supported by PDF 1.6 and above.

## Bulk Font Configuration { #bulk}

If you want FOP to use custom fonts, you need to tell it where to find them. This is done in the configuration file and once per renderer (because each output format is a little different). For convenience, FOP allows bulk registering of fonts; you can either tell FOP to find your operating system fonts or you can specify directories that it will search for support fonts. These fonts will then automatically be registered.

    :::xml
    <renderers>
      <renderer mime="application/pdf">
         <fonts>
            <!-- register all the fonts found in a directory -->
            <directory>C:\MyFonts1</directory>

            <!-- register all the fonts found in a directory and all of its sub directories (use with care) -->
            <directory recursive="true">C:\MyFonts2</directory>

            <!-- automatically detect operating system installed fonts -->
            <auto-detect/>
         </fonts>
      </renderer>
    </renderers>

<note>Review the documentation for [FOP Configuration](configuration.html) for instructions on making the FOP configuration available to FOP when it runs. Otherwise, FOP has no way of finding your custom font information. It is currently not possible to easily configure fonts from Java code.</note>

### Register Fonts with FOP { #register}

You must tell FOP how to find and use the font files by registering them in the [FOP Configuration](configuration.html). Add entries for your custom fonts, regardless of font type, to the configuration file in a manner similar to the following:

    :::xml
    <renderers>
       <renderer mime="application/pdf">
           <fonts>
               <font kerning="yes" embed-url="/System/Library/Fonts/Arial.ttf" embedding-mode="subset">
                   <font-triplet name="Arial" style="normal" weight="normal"/>
               </font>
               <font kerning="yes" embed-url="/System/Library/Fonts/AEHO____.PFB">
                   <font-triplet name="Avenir-HeavyOblique" style="normal" weight="bold"/>
               </font>
           </fonts>
       </renderer>
    </renderers>

- The "embed-url" attribute is used to specify the font file. Relative URLs are resolved relative to the font-base property (or base) if available. See [FOP: Configuration](configuration.html) for more information. 

- The "embedding-mode" attribute is optional and can take two values: subset (the default) and full. If not specified the font is subset embedded for TTF and OTF or full embedded for Type 1, unless it is explicitly referenced (see below).

- The font "kerning" attribute is optional. Default is "true".

- The "embed-as-type1" attribute is optional, setting to "true" converts OTF fonts to Type 1 for postscript output.

- The "simulate-style" attribute is optional, setting to "true" generates bold and oblique looking glyphs for PDF output.

- When setting the "embed-url" attribute for Type 1 fonts, be sure to specify the PFB (actual font data), not the PFM (font metrics) file. If the PFM (or AFM) file is in a different location (i.e., not in the same directory) then you need to specify an "embed-url-pfm" (or "embed-url-afm") attribute next to the "embed-url" one.

- The attribute "encoding-mode" is optional an may have the following values:

    - auto: default font encoding mode ("cid" for Truetype, "single-byte" for Type 1)

    - single-byte: use single-byte encodings in the target format (if applicable)

    - cid: encode as CID-keyed font (currently only supported for PDF output with TrueType fonts)

- The fonts "directory" tag can be used to register fonts contained within a single or list of directory paths. The "recursive" attribute can be specified to recursively add fonts from all sub directories.

- The fonts "auto-detect" tag can be used to automatically register fonts that are found to be installed on the native operating system.

- Fonts registered with "font" tag configurations override fonts found by means of "directory" tag definitions.

- Fonts found as a result of a "directory" tag configuration override fonts found as a result of the "auto-detect" tag being specified.

- If relative URLs are specified, they are evaluated relative to the value of the "font-base" setting. If there is no "font-base" setting, the fonts are evaluated relative to the base directory.

- If a fop.xconf is not used, or the "embed-url" attribute is missing, the fonts are referenced (and the default Base-14 is used in this case).

### TrueType Collections { #truetype-collections-metrics}

TrueType collections (.ttc files) contain more than one font. The individual sub-fonts of a TrueType Collection can be selected using the "sub-font" attribute on the "font" element. Example:

    :::xml
    <font embed-url="gulim.ttc" sub-font="GulimChe">
      <font-triplet name="GulimChe" style="normal" weight="normal"/>
    </font>

### Auto-Detect and auto-embed feature { #autodetect}

When the "auto-detect" flag is set in the configuration, FOP will automatically search for fonts in the default paths for your operating system.

FOP will also auto-detect fonts which are available in the classpath, if they are described as "application/x-font" in the MANIFEST.MF file. For example, if your .jar file contains font/myfont.ttf:

    Manifest-Version: 1.0

        Name: font/myfont.ttf
        Content-Type: application/x-font

This feature allows you to create JAR files containing fonts. The JAR files can be added to fop by providem them in the classpath, e.g. copying them into the lib/ directory.

#### The font cache { #font-cache}

Apache FOP maintains a cache file that is used to speed up auto-detection. This file is usually found in the ".fop" directory under the user's home directory. It's called "fop-fonts.cache". When the user's home directory is not writable, the font cache file is put in the directory for temporary files.

If there was a problem loading a particular font, it is flagged in the cache file so it is not loaded anymore. So, if a font is actually around but is still not found by Apache FOP, it's worth a try to delete the font cache file which forces Apache FOP to reparse all fonts.

### Referencing Fonts { #referencing_fonts}

By default, all fonts are embedded if an output format supports font embedding. In some cases, however, it is preferred that some fonts are only referenced. When working with referenced fonts it is important to be in control of the target environment where the produced document is consumed, i.e. the necessary fonts have to be installed there.

There are two different ways how you can specify that a font should be referenced:

1. When explicitly configuring a font, font referencing is controlled by the embed-url attribute. If you don't specify the embed-url attribute the font will not be embedded, but will only be referenced.

1. For automatically configured fonts there's a different mechanism to specify which fonts should be referenced rather than embedded. This is done in the "referenced-fonts" element in the configuration. Here's an example:

        :::xml
        <fop version="1.0">
          <fonts>
            <referenced-fonts>
              <match font-family="Helvetica"/>
              <match font-family="DejaVu.*"/>
            </referenced-fonts>
          </fonts>
        </fop>

At the moment, you can only match fonts against their font-family. It is possible to use regular expressions as is shown in the second example above ("DejaVu.*"). The syntax for the regular expressions used here are the one used by the [package](https://docs.oracle.com/javase/7/docs/api/java/util/regex/package-summary.html). So, in the above snippet "Helvetica" and all variants of the "DejaVu" font family are referenced. If you want to reference all fonts, just specify `font-family=".*"`.

The `referenced-fonts` element can be placed either inside the general `fonts` element (right under the root) or in the `fonts` element under the renderer configuration. In the first case, matches apply to all renderers. In the second case, matches only apply to the renderer where the element was specified. Both cases can be used at the same time.

### Embedding Fonts { #embedding_fonts}

Some notes related to embedded fonts:

- When FOP embeds a font in PDF, it adds a prefix to the fontname to ensure that the name will not match the fontname of an installed font. This is helpful with older versions of Acrobat Reader that preferred installed fonts over embedded fonts.

- When embedding PostScript fonts, the entire font is always embedded.

- When embedding TrueType (ttf) or TrueType Collections (ttc), a subset of the original font, containing only the glyphs used, is embedded in the output document. That's the default, but if you specify encoding-mode="single-byte" (see above), the complete font is embedded.

### Font Substitution { #font_substitution}

When a `<substitutions/>` section is defined in the configuration, FOP will re-map any font-family references found in your FO input to a given substitution font.

- If a `<substitution/>` is declared, it is mandatory that both a <from/> and <to/> child element is declared with a font-family attribute.

- Both font-weight and font-style are optional attributes, if they are provided then a value of 'normal' is assumed.

For example you could make all FO font-family references to 'Arial' with weights between 700 and 900 reference the normal 'Arial Black' font.

    :::xml
    <fop version="1.0">
      <fonts>
        <substitutions>
          <substitution>
            <from font-family="Arial" font-weight="700..900"/>
            <to font-family="Arial Black"/>
          </substitution>
          <substitution>
            <from font-family="FrutigerLight"/>
            <to font-family="Times" font-weight="bold" font-style="italic"/>
          </substitution>
        </substitutions>
      </fonts>
    </fop>

## Font Selection Strategies { #selection}

There are two font selection strategies: character-by-character or auto. The default is auto.

Auto selected the first font from the list which is able to display the most characters in a given word. This means (assume font A has characters for abclmn, font B for lnmxyz, fontlist is A,B):

- aaa lll xxx would be displayed in fonts A A B

- aaaxx would be displayed in font A

- aaaxxx would be displayed in font A

- aaaxxxx would be displayed in font B

Character-by-Character is NOT yet supported!

## Font List Command-Line Tool { #font-list}

FOP contains a small command-line tool that lets you generate a list of all configured fonts. Its class name is: `org.apache.fop.tools.fontlist.FontListMain`. Run it with the "-?" parameter to get help for the various options.