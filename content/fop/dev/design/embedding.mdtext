Title: Apache&trade; FOP Design: Embedding Apacheï¿½ FOP in Other Applications
<version>$Revision: 1298724 $</version><authors><person email="keiron@aftexsw.com" name="Keiron Liddle"></person></authors>

# Introduction  <a id="#intro"></a>

This is the design for the external interface when Apache&trade; FOP is to be embedded inside another java application.

Common places where FOP is embedded is in a report production application of a server side application such as<jump href="http://xml.apache.org/cocoon/index.html">Cocoon</jump>.

# Settings  <a id="#Settings"></a>

## User Agent # <a id="#User+Agent"></a>

Possible meanings for a user agent:


- something that makes decisions where the specifiction indicates that the user agent should decide

- FOP as the user agent, represented by a class that handles various setup and decision values

- an class that handles context for a particular FOP conversion that can be configured/overridden when embedding

The user agent is responsible for supplying user or context specific information. The list of user agent values can be found on the<jump href="useragent.html">User Agent</jump>page.

## Logging # <a id="#Logging"></a>


- logging level

- logging messages of various levels

- error handling

- Logging setup (LogKit, Log4J, JDK14Logging)

## XML input # <a id="#XML+input"></a>


- various ways to supply FOP with the xsl:fo file, fo, xml+xsl

- sax handler

## general options # <a id="#general+options"></a>


- base url

- uri resolvers

- which implementation of a particular LayoutManager to use

## Rendering Options # <a id="#Rendering+Options"></a>


- embedding fonts

- compression in pdf

- image embedding

for the PS renderer (eventually):


- PostScript Level

- PPD to use

- binary/ascii switch

## Render Results # <a id="#Render+Results"></a>

Generate Output statistics from FOP:


- Number of pages total

- Number of pages of each page-sequence

- page-master used for each page (could be used to control the paper bin to get paper from, important for me in conjunction with PS Renderer)

- recoverable errors such as overflow

## Setting Up # <a id="#Setting+Up"></a>

The Driver handles the XML input. The user agent information is through the FOUserAgent. Handle logging through the user agent. Options could also be handled through the user agent, using mime type selection for renderer options.

## Others # <a id="#Others"></a>

Render to more than one renderer at once (maybe not from the command line). For example you could generate a PDF for the archive and the PS for the printer in one run. It would probably be faster than converting the PDF to PostScript afterwards. Make the fo tree reuseable. If the fonts are the same then use the same area tree to output to different renderers.

Several code pieces for resolving URLs and/or file locations are scattered all over FOP and Batik. These should be replaced with an URIResolver invocation to unify behaviour and remove redundancies.
